[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# UI Suit hiding, part 1/4
[[patches]]
[patches.pattern]
target = 'main.lua'
pattern = "table.insert(n.nodes, tally_sprite("
position = 'before'
match_indent = true
payload = '''

if suit_tallies[suit_map[i]] ~= 0 then

'''

# UI Suit hiding, part 2/4
[[patches]]
[patches.regex]
target = 'main.lua'
pattern = "(?<indent>[\t ]*)suit_map\\[\\s*i\\s*\\]\\s*\\)\\s*\\)"
position = 'after'
line_prepend = '$indent'
payload = '''end'''


# UI Suit hiding, part 3/4
[[patches]]
[patches.pattern]
target = 'main.lua'
pattern = "if not SMODS.Suits[suit].disabled then"
position = 'at'
match_indent = true
payload = '''if (not SMODS.Suits[suit].disabled) and (suit_counts[suit] ~= 0) then'''

# UI Suit hiding, part 4/4
[[patches]]
[patches.pattern]
target = 'main.lua'
pattern = "if not SMODS.Suits[v].disabled then"
position = 'at'
match_indent = true
payload = '''if (not SMODS.Suits[v].disabled) and (suit_counts[v] ~= 0) then'''

# Exotics toggle
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'G.GAME.hands[text].played = G.GAME.hands[text].played + 1'
position = 'after'
match_indent = true
payload = '''

if text == 'h_bunc_Spectrum'
or text == 'h_bunc_Straight Spectrum'
or text == 'h_bunc_Spectrum House'
or text == 'h_bunc_Spectrum Five' then
    enable_exotics()
end

'''

# CardArea:emplace() (X-Ray)
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = 'if #self.cards > self.config.card_limit then'
position = 'before'
match_indent = true
payload = '''

if G.jokers ~= nil and self == G.hand then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Xray' then
            v:calculate_joker({ emplaced_card = card })
        end
    end
end

'''

# Joker Knight variables
[[patches]]
[patches.pattern]
target = 'engine/node.lua'
pattern = 'function Node:drag()'
position = 'before'
match_indent = true
payload = '''

local break_table = {before = nil, after = nil}

'''

# Node:drag() (Joker Knight 1/2)
[[patches]]
[patches.pattern]
target = 'engine/node.lua'
pattern = 'function Node:drag()'
position = 'after'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Knight' and not v.debuff then
            if break_table.before == nil then

                break_table.before = {}

                for _, v in ipairs(G.jokers.cards) do
                    table.insert(break_table.before, v.ability.name)
                end

                break_table.after = break_table.before

            end
        end
    end
end

'''

# Node:stop_drag() (Joker Knight 2/2)
[[patches]]
[patches.pattern]
target = 'engine/node.lua'
pattern = 'function Node:stop_drag()'
position = 'after'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Knight' and not v.debuff then
            function do_tables_match(a, b)
                return table.concat(a) == table.concat(b)
            end

            if break_table.before ~= nil then

            break_table.before = {}

            for _, v in ipairs(G.jokers.cards) do
                table.insert(break_table.before, v.ability.name)
            end

            if not do_tables_match(break_table.before, break_table.after) then
                v:calculate_joker({ break_positions = true })
            end

                break_table.before = nil
                break_table.after = nil
            end
        end
    end
end

'''

# create_card() (JMJB)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'card:set_edition(edition)'
position = 'before'
match_indent = true
payload = '''

if card.ability.name == 'JMJB' then
    if card:get_edition() == nil then
        edition = poll_edition('aura', nil, true, true)
    end
end

'''

# ease_dollars() (Fiendish)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'function ease_dollars(mod, instant)'
position = 'after'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Fiendish' and not v.debuff then
            if mod > 0 then
                if pseudorandom('fiendish'..G.SEED) < G.GAME.probabilities.normal / v.ability.extra.odds then
                    mod = 1
                    card_eval_status_text(
                    v,
                    'extra',
                    nil, nil, nil,
                    {message = '$'..(mod or '1'), colour = G.C.RED, instant = true})
                else
                    mod = mod * 2
                    card_eval_status_text(
                    v,
                    'extra',
                    nil, nil, nil,
                    {message = '$'..mod, colour = G.C.ORANGE, instant = true})
                end
            end
        end
    end
end

'''

# create_card() (Doorhanger)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'local _pool, _pool_key = get_current_pool(_type, _rarity, legendary, key_append)'
position = 'before'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Doorhanger' and not v.debuff then
            if _rarity == nil or _rarity < 0.9 then

                _rarity = 0.9

                if pseudorandom('doorhanger'..G.SEED) > 0.98 then
                    _rarity = 1
                end
            end
        end
    end
end

'''

# evaluate_play (Nil Bill)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "card_eval_status_text(scoring_hand[i], 'debuff')"
position = 'after'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Nil Bill' and not v.debuff then
            v:calculate_joker({debuffed_card = scoring_hand[i]})
        end
    end
end

'''

# Card:is_suit (Myopia & Astigmatism)
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if next(find_joker('Smeared Joker')) and (self.base.suit == 'Hearts' or self.base.suit == 'Diamonds') == (suit == 'Hearts' or suit == 'Diamonds') then"
position = 'before'
match_indent = true
payload = '''

if G.jokers ~= nil then
            for _, v in ipairs(G.jokers.cards) do
                if v.ability.name == 'Myopia' and not v.debuff then
                    if self.base.suit == 'Spades' and (self.base.suit == 'Spades') == (suit == 'Spades' or suit == 'Halberds') then
                        return true
                    end
                    if self.base.suit == 'Clubs' and (self.base.suit == 'Clubs') == (suit == 'Clubs' or suit == 'Halberds') then
                        return true
                    end
                end
            end
        end

if G.jokers ~= nil then
            for _, v in ipairs(G.jokers.cards) do
                if v.ability.name == 'Astigmatism' and not v.debuff then
                    if self.base.suit == 'Hearts' and (self.base.suit == 'Hearts') == (suit == 'Hearts' or suit == 'Fleurons') then
                        return true
                    end
                    if self.base.suit == 'Diamonds' and (self.base.suit == 'Diamonds') == (suit == 'Diamonds' or suit == 'Fleurons') then
                        return true
                    end
                end
            end
        end

        if G.jokers ~= nil then
            for _, v in ipairs(G.jokers.cards) do
                if v.ability.name == 'Smeared Joker' and not v.debuff then
                    if self.base.suit == 'Fleurons' and (suit ~= 'Fleurons') then
                        return false
                    end
                    if self.base.suit == 'Halberds' and (suit ~= 'Halberds') then
                        return false
                    end
                    if (self.base.suit ~= 'Fleurons' and self.base.suit ~= 'Halberds') and (suit == 'Fleurons' or suit == 'Halberds') then
                        return false
                    end
                end
            end
        end

'''

# G.FUNCS.discard_cards_from_highlighted() (The Paling 1/2)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'G.GAME.current_round.discards_used = G.GAME.current_round.discards_used + 1'
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_paling' and not G.GAME.blind.disabled then
            if G.GAME.current_round.hands_left > 1 then
                ease_hands_played(-1) --
            elseif G.GAME.current_round.hands_left == 1 or G.GAME.current_round.hands_left == 0 then
                ease_hands_played(-1) --

                G.E_MANAGER:add_event(Event({ trigger = 'after', delay = 1.8, func = function()
                    G.STATE = G.STATES.GAME_OVER
                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then 
                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0
                    end
                    G:save_settings()
                    G.FILE_HANDLER.force = true
                    G.STATE_COMPLETE = false
                return true end }))
            end
            G.GAME.blind:wiggle()
        end

'''

# G.FUNCS.play_cards_from_highlighted() (The Paling 2/2)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "inc_career_stat('c_hands_played', 1)"
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_paling' and not G.GAME.blind.disabled then
            if G.GAME.current_round.discards_left >= 1 then
                ease_discard(-1, true)
                G.GAME.blind:wiggle()
                G.GAME.blind.triggered = true
            end
        end

'''

# G.FUNCS.play_cards_from_highlighted() (The Umbrella)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "inc_career_stat('c_hands_played', 1)"
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_umbrella' and not G.GAME.blind.disabled then
            G.E_MANAGER:add_event(Event({ func = function()

                for k, v in ipairs(G.hand.cards) do
                    if v.facing == 'front' then
                        v:flip()
                    end
                end

                G.GAME.blind:wiggle()
                G.GAME.blind.triggered = true

            return true end }))
        end

'''

# The Tine 1/3
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "highlight_card(scoring_hand[i],(i-0.999)/5,'up')"
position = 'after'
match_indent = true
payload = '''

local played_rank = scoring_hand[i].base.value

if G.GAME.played_ranks == nil then G.GAME.played_ranks = {} end

if G.GAME.played_ranks[played_rank] then
    G.GAME.played_ranks[played_rank] = G.GAME.played_ranks[played_rank] + 1
else
    G.GAME.played_ranks[played_rank] = 1
end

'''

# function end_round() (The Tine 2/3)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.GAME.current_round.most_played_poker_hand = _handname"
position = 'before'
match_indent = true
payload = '''

if G.GAME.played_ranks ~= nil then
    local max_rank = nil
    local max_count = -1

    for rank, count in pairs(G.GAME.played_ranks) do
        if count > max_count then
            max_count = count
            max_rank = rank
        end
    end

    G.GAME.current_round.most_played_rank = max_rank
end


'''

# The Tine 3/3
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "most_played_poker_hand = 'High Card',"
position = 'after'
match_indent = true
payload = '''
most_played_rank = '2','''

# G.FUNCS.discard_cards_from_highlighted() (The Swing 1/2)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'G.GAME.current_round.discards_used = G.GAME.current_round.discards_used + 1'
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_swing' and not G.GAME.blind.disabled then
            G.E_MANAGER:add_event(Event({ func = function()
                for k, v in ipairs(G.hand.cards) do
                    v:flip()
                end

                G.GAME.blind:wiggle()
                G.GAME.blind.triggered = true

                if G.GAME.Swing == true then
                    G.GAME.Swing = false
                else
                    G.GAME.Swing = true
                end
            return true end }))
        end

'''

# G.FUNCS.play_cards_from_highlighted() (The Swing 2/2)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "inc_career_stat('c_hands_played', 1)"
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_swing' and not G.GAME.blind.disabled then
            G.E_MANAGER:add_event(Event({ func = function()
                for k, v in ipairs(G.hand.cards) do
                    if not (v.area == G.hand and v.highlighted and v.facing == 'front') then
                        v:flip()
                    end
                end

                G.GAME.blind:wiggle()
                G.GAME.blind.triggered = true

                if G.GAME.Swing == true then
                    G.GAME.Swing = false
                else
                    G.GAME.Swing = true
                end
            return true end }))
        end

'''

# G.FUNCS.cash_out (The Miser)
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = 'G.STATE = G.STATES.SHOP'
position = 'at'
match_indent = true
payload = '''

if G.GAME.Miser then
    G.STATE = G.STATES.BLIND_SELECT
    G.GAME.Miser = false
else
    G.STATE = G.STATES.SHOP
end

'''

# function Card:highlight (The Gate 1/2)
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = 'self.highlighted = is_higlighted'
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_gate' and not G.GAME.blind.disabled and is_higlighted and self.area == G.hand then
            self.ability.forced_selection = true
        end

'''

# function CardArea:remove_from_highlighted (The Gate 2/2)
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = 'function CardArea:remove_from_highlighted(card, force)'
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_gate' and not force and card.area == G.hand then
    if G.GAME.blind.disabled then
        card.ability.forced_selection = false
    elseif not G.GAME.blind.disabled and card.ability.forced_selection == true then
        G.GAME.blind:wiggle()
    end
end

'''

# function end_round() (The Mask 1/2)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.GAME.current_round.most_played_poker_hand = _handname"
position = 'before'
match_indent = true
payload = '''

local lowestValue = math.huge
        local leastPlayedHand = ''

        for i = #G.handlist, 1, -1 do
            local v = G.handlist[i]
            local playedCount = G.GAME.hands[v].played
            if playedCount < lowestValue then
                lowestValue = playedCount
                leastPlayedHand = v
            end
        end

        G.GAME.current_round.least_played_poker_hand = leastPlayedHand

'''

# The Mask 2/2
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "most_played_poker_hand = 'High Card',"
position = 'after'
match_indent = true
payload = '''
least_played_poker_hand = 'High Card','''

# G.FUNCS.discard_cards_from_highlighted (The Claw)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "draw_card(G.hand, G.discard, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])"
position = 'at'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_claw' and not G.GAME.blind.disabled then
    draw_card(G.hand, G.deck, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])
    G.deck:shuffle('claw'..G.GAME.round_resets.ante)
else
    draw_card(G.hand, G.discard, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])
end

'''

# function Card:highlight (The Veil)
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = 'self.highlighted = is_higlighted'
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_veil' and not G.GAME.blind.disabled and is_higlighted and self.area == G.hand then
    if self.facing == 'front' then
        self:flip()
        G.GAME.blind:wiggle()
    end
end

'''

# G.FUNCS.cash_out (Vermilion Trident 1/2)
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = 'G.STATE = G.STATES.SHOP'
position = 'at'
match_indent = true
payload = '''

if G.GAME.Trident then
    G.STATE = G.STATES.BLIND_SELECT
else
    G.STATE = G.STATES.SHOP
end

'''

# function get_new_boss() (Vermilion Trident 2/2)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'return boss'
position = 'before'
match_indent = true
payload = '''

if boss == 'bl_bunc_final_trident' then
    G.GAME.Trident = true
else
    G.GAME.Trident = false
end

'''

# G.FUNCS.discard_cards_from_highlighted (Magenta Dagger 1/4)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.FUNCS.discard_cards_from_highlighted = function(e, hook)"
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_final_dagger' and not G.GAME.blind.disabled then
    G.FUNCS.play_cards_from_highlighted({antiscore = true})
    return
end

'''

# G.FUNCS.play_cards_from_highlighted (Magenta Dagger 2/4)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "ease_hands_played(-1)"
position = 'at'
match_indent = true
payload = '''
local function calculate_discard()
    for i = 1, #G.hand.cards do
        eval_card(G.hand.cards[i], {pre_discard = true, full_hand = G.hand.highlighted, hook = hook})
    end
    for j = 1, #G.jokers.cards do
        G.jokers.cards[j]:calculate_joker({pre_discard = true, full_hand = G.hand.highlighted, hook = hook})
    end
end

if e.antiscore then
    ease_discard(-1)
    calculate_discard()
else
    ease_hands_played(-1)
end

'''

# G.FUNCS.play_cards_from_highlighted (Magenta Dagger 3/4)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.FUNCS.evaluate_play()"
position = 'at'
match_indent = true
payload = '''

if e.antiscore then
    G.FUNCS.evaluate_play(e)
else
    G.FUNCS.evaluate_play()
end

'''

# function update_hand_text (Magenta Dagger 4/4)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "ease_to = G.GAME.chips + math.floor(hand_chips*mult),"
position = 'at'
match_indent = true
payload = '''ease_to = G.GAME.chips + math.floor(hand_chips * mult) * (e and e.antiscore and -1 or 1),'''

